name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Release ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            archive: zip
          - target: x86_64-apple-darwin
            os: macos-latest
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            archive: tar.gz
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            archive: tar.gz

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup cache
        uses: Swatinem/rust-cache@v2

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        shell: bash
        run: |
          # 获取版本号
          version=${GITHUB_REF#refs/tags/}
          
          # 获取二进制名称
          binary_name=www
          
          # 创建目录
          mkdir -p release
          
          # 复制文件
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp "target/${{ matrix.target }}/release/${binary_name}.exe" release/
          else
            cp "target/${{ matrix.target }}/release/${binary_name}" release/
          fi
          
          # 复制额外文件
          cp README.md release/ 2>/dev/null || true
          cp LICENSE release/ 2>/dev/null || true
          
          # 打包
          cd release
          if [[ "${{ matrix.archive }}" == "zip" ]]; then
            7z a "../${binary_name}-${version}-${{ matrix.target }}.zip" *
          else
            tar czf "../${binary_name}-${version}-${{ matrix.target }}.tar.gz" *
          fi

      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.zip
            *.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}